To Do:
	- Loops vervangen voor een ding in dag
		- Lijst van Storten (oftewel elke loop begint bij een index)
		- lijst van ruimte over per dump-dump reeks (tour)
		- Grooooote loop: begint bij dumps[0] en eindigt bij dumps[0]
		- 2.5-opt: Bij elke switch checken of operatie mag
		- toCheckString: begin bij dumps[0].Next, ga door totte_met_ isDumpCounter == dumps.Count 
	
	-AANWENNEN: Als operatie in loop/dag/schedule, dan meteen tijd/afval aanpassen!



Format Inlevermodel

Iedere regel bevat vier entries gescheiden door een punt-komma
1.	Vrachtautonummer (1 of 2)
2.	Dagnummer (maandag =1, dinsdag =2, …, vrijdag =5)
3.	Hoeveelste adres dat het voertuig op die dag aandoet (begin met 1, 2, …)
4.	Id. van het adres (uit orderbestand.txt); de stort heeft nummer 0. (OrderId)
Voorbeeld: Op maandag begint voertuig 1 met adres 10, daarna 20, dan afstorten, en vervolgens door naar 30. 
Op het eind van de dag gaat de auto weer naar de stort; dit moet je ook aangeven.
1; 1; 1; 10
1; 1; 2; 20
1; 1; 3; 0
1; 1; 4; 30

SWEETSPOT PARAMETERS:
	BESTE MET CLUSTER:
	clusterCount = 4, 5, 6 <- verschilt wann welke beter.
	nonPlannedOrders = orders.OrderBy(o => o.Cluster).ThenBy(o => o.Frequency).ThenBy(o => o.Score).ToList();
	opCount = 20
	Hillclimb
	int index = rnd.Next(0, s.nonPlannedOrders.Count / 5);
	AddByCluster BEST

	TOT NU TOE BESTE (DUS BETER DAN MET CLUSTER):
	nonPlannedOrders = orders.OrderBy(o => o.Score).ThenByDescending(o => o.Frequency).ToList();
	opCount = 20
	Hillclimb
	int index = rnd.Next(0, s.nonPlannedOrders.Count / 5);
	Add BEST

http://178.85.229.78:8067/team/157557372232042770

========================
=== SWS NOG MAKEN!!! ===
========================
een algortime die een loop krijgt en die optimaliseert,
dus de volgorde dusdanig maakt dat de loop het effectiefst is.
Dit algoritme hoeft alleen maar te kijken naar reistijden want een loop voldoet altijd aan de afval constraints.

Werking algoritme:
1. Krijg een te optimaliseren loop L
2. Kijk of alle nodes in L links of rechts zijn van de stort
3. Zoja ga naar stap 5. <- kunnen we GOTO gebruiken!
4. Verdeel de nodes in L over een lijst van nodes links en rechts van de stort.
	Pas op beide lijsten stap 5. toe.
5. Krijg een lijst van nodes
	5.1 trek een lijn door deze nodes dusdanig dat de helft van de lijst boven de lijn zit, de andere helft onder de lijn.
		Als de lijst van nodes oneven is, neem dan deze lijn dusdanig dat deze door een Node snijd én nog steeds
			de helft van de nodes boven zich heeft en de andere helft onder zich.
	5.2 Sorteer nu voor elke helft de nodes op volgorde van tijd tot de stort.
	5.3 maak de nieuwe loop als:
		stort -> alle_nodes_1e_helft -> alle_nodes_2e_helft_reversed
6. return.

Nog te bepalen:
- Gezien de layout van alle punten kan een route die links en rechts van de stort gaat beter niet verdeeld worden
	qua links/rechts van de stort op basis van X maar op basis van een schuine lijn door de stort met RC=1 (dus zo'n lijn: /)
- De nieuwe loop is gedefinieerd als: stort -> alle_nodes_1e_helft -> alle_nodes_2e_helft_reversed,
	wat is de 1e helft en wat is de 2e helft? maakt dat uit?

===========================================
=== Evolutionairy Programming Approach: ===
===========================================
Iterate till convergence || maxiterations || user interupt:
	Schedule[parentCount] Parents;
	List<Schedule> Children = new List<Schedule>(to_be_determined);
	int childrenPerParents = zeg_t_maar;
	for (int p = 1; p < Parents.Count; p-=-1)
		List<Schedule> offSpring = GenerateChildren(Parents[p-1], Parents[p], childrenPerParents);
		Children.Concat(offSpring);
	Random rnd = new Random()
	for (int m = 0; m < mutation_count; m-=-1)
		ApplyMutation(Children[rnd.Next(0, Children.Count)]);
	Parents = GetBestOffSpring(Children, parentCount);


Algemene Thoughts:
	Mutatie moet te doen zijn, want gwn een random operator toepassen (en die operator een random TOEGESTANE plek laten pakken
		want fuck heuristiek, tis per slot mutatie).

Moeilijkheden / dingen te bedenken:
	GenerateChildren gaat lastig worden.
	Hoe ga je van 2 parents x aantal kinderen maken op basis van de eigenschappen van een parent...
		2 Schedules...
		Je wilt het lieftst 'de beste eigenschappen' van die 2 en dat op x aantal mogelijkheden combineren.
		- Je kan alles dat overeenkomt gebruiken als base_child
			- dan voor elke extra order die is ingepland per parent deze toevoegen aan base_child als nieuw kind.
				-> voor zover dat toegestaan is
		- Je kan alles wat ze van elkaar verschillen nemen als child
		- foreach day, foreach truck pak de loop van de parent met de kleinste time.

=== Genetic representation: === //Een andere manier van searchspace representatie voor Evo-Alg.
	moet een reeks van cijfers zijn, het liefst bits...
	Optie 1:
		de lijst van orders altijd dezelfde volgorde houden
		een order moet altijd of niet, of volledig ingepland zijn.
		de reeks cijfers:
		voor elke order, 
			voor elke keer dat die ingepland moet worden (dus lenght(freq))
				0,0 -> niet ingepland
				d,t,l -> ingepland op dag d, in truck t, in loop l.
		
		Offspring genereren:
			population.OrderBy(p => p.Score)
			pak de n best en m random schedules uit de population.
			Pak telkens 2 parents:
				- basiskind is p1 XOR p2
				- for elke order (p2 - (p1 XOR p2))
					nieuwkind = basiskind + order
				- for elke order (p1 - (p1 XOR p2))
					nieuwkind = basiskind + order
		mutation:
			pak een random kind, maak een kopie waarbij:
				een order die ingepland is verwijderen
				een order die ingepland is op een andere plek zetten, met al zn freq of maar 1 inplan.
				een order die NIET ingepland is inplannen op:
					NOG BESLISSEN WAT:
					- random toegestaan moment
					- beste toegestane moment
					- eerste/laatste toegestane moment
			doe dit net zo vaak totdat populationSize == desiredPopSize


		Aangezien kinderen sws de orders bevatten die beide ouders gemeen hebben is dit aardig
			adding biased, drm moet mutation miss wat meer deletion biased worden.


---
Fleshed out werkwijze:
- Variabelen:
	population_size = ....
	parent_amount = ....

- Initialisatie:
	-> Volledige random add van zoveel mogelijk orders voor population_size aantal schedules.
		-> als een orders geadd wordt, dan moet de volledige order geadd worden.
- Iteratie:
	-> Sorteer populatie op basis van Score.
	-> Bepaal parent_amount parents uit de populatie.
		-> 




		